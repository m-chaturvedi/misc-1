# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import iot_pb2 as iot__pb2


class IotSenderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSensorData = channel.stream_unary(
                '/IotSender/GetSensorData',
                request_serializer=iot__pb2.SensorData.SerializeToString,
                response_deserializer=iot__pb2.Reply.FromString,
                )
        self.SendSensorStatus = channel.unary_unary(
                '/IotSender/SendSensorStatus',
                request_serializer=iot__pb2.SensorId.SerializeToString,
                response_deserializer=iot__pb2.SensorStatus.FromString,
                )
        self.SendSensorHistory = channel.unary_unary(
                '/IotSender/SendSensorHistory',
                request_serializer=iot__pb2.SensorId.SerializeToString,
                response_deserializer=iot__pb2.SensorHistory.FromString,
                )
        self.SendTopSensorId = channel.unary_unary(
                '/IotSender/SendTopSensorId',
                request_serializer=iot__pb2.Field.SerializeToString,
                response_deserializer=iot__pb2.TopSensorId.FromString,
                )


class IotSenderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSensorData(self, request_iterator, context):
        """From the perspective of the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSensorStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSensorHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTopSensorId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IotSenderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSensorData': grpc.stream_unary_rpc_method_handler(
                    servicer.GetSensorData,
                    request_deserializer=iot__pb2.SensorData.FromString,
                    response_serializer=iot__pb2.Reply.SerializeToString,
            ),
            'SendSensorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSensorStatus,
                    request_deserializer=iot__pb2.SensorId.FromString,
                    response_serializer=iot__pb2.SensorStatus.SerializeToString,
            ),
            'SendSensorHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSensorHistory,
                    request_deserializer=iot__pb2.SensorId.FromString,
                    response_serializer=iot__pb2.SensorHistory.SerializeToString,
            ),
            'SendTopSensorId': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTopSensorId,
                    request_deserializer=iot__pb2.Field.FromString,
                    response_serializer=iot__pb2.TopSensorId.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'IotSender', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IotSender(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSensorData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/IotSender/GetSensorData',
            iot__pb2.SensorData.SerializeToString,
            iot__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSensorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IotSender/SendSensorStatus',
            iot__pb2.SensorId.SerializeToString,
            iot__pb2.SensorStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSensorHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IotSender/SendSensorHistory',
            iot__pb2.SensorId.SerializeToString,
            iot__pb2.SensorHistory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTopSensorId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IotSender/SendTopSensorId',
            iot__pb2.Field.SerializeToString,
            iot__pb2.TopSensorId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
